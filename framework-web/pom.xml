<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>com.wegirl</groupId>
        <artifactId>framework</artifactId>
        <version>1.0-SNAPSHOT</version>
        <relativePath>../pom.xml</relativePath>
    </parent>
    <groupId>com.wegirl</groupId>
    <artifactId>framework-web</artifactId>
    <version>${project.parent.version}</version>

    <dependencies>

        <!--<dependency>
            <groupId>com.wegirl</groupId>
            <artifactId>framework-share</artifactId>
            <version>${project.parent.version}</version>
        </dependency>-->
        <dependency>
            <groupId>com.wegirl</groupId>
            <artifactId>framework-component</artifactId>
            <version>${project.parent.version}</version>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
        </dependency>
    </dependencies>

    <build>
        <finalName>${project.parent.artifactId}</finalName>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <!-- 指定该Main Class为全局的唯一入口 -->
                    <!--<mainClass>com.wegirl.framework.web.FrameworkWebApplication</mainClass>-->
                    <layout>ZIP</layout>
                    <excludes>
                        <exclude>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                        </exclude>
                    </excludes>
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <!--可以把依赖的包都打包到生成的Jar包中-->
                            <goal>repackage</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <!--使用docker-maven-plugin插件-->
            <!--<plugin>
                <groupId>com.spotify</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <version>1.0.0</version>
                &lt;!&ndash;将插件绑定在某个phase执行&ndash;&gt;
                <executions>
                    <execution>
                        <id>build-image</id>
                        &lt;!&ndash;用户只需执行mvn package ，就会自动执行mvn docker:build&ndash;&gt;
                        <phase>package</phase>
                        <goals>
                            <goal>build</goal>
                        </goals>
                    </execution>
                </executions>

                <configuration>
                    &lt;!&ndash;指定生成的镜像名,这里是我们的作者名+项目名&ndash;&gt;
                    <imageName>rui/${project.build.finalName}</imageName>

                    &lt;!&ndash;指定标签 这里指定的是镜像的版本，我们默认版本是latest&ndash;&gt;
                    <imageTags>
                        <imageTag>latest</imageTag>
                    </imageTags>

                    &lt;!&ndash;指定基础镜像jdk1.8&ndash;&gt;
                    <baseImage>java</baseImage>
                    &lt;!&ndash;
                    镜像制作人本人信息
                    <maintainer>bruceliu@email.com</maintainer>
                    &ndash;&gt;
                    &lt;!&ndash;切换到ROOT目录&ndash;&gt;
                    <workdir>/ROOT</workdir>

                    &lt;!&ndash;查看我们的java版本&ndash;&gt;
                    <cmd>["java", "-version"]</cmd>

                    &lt;!&ndash;${project.build.finalName}.jar是打包后生成的jar包的名字&ndash;&gt;
                    <entryPoint>["java", "-jar", "/${project.build.finalName}.jar"]</entryPoint>

                    &lt;!&ndash;指定远程 docker api地址&ndash;&gt;
                    <dockerHost>http://121.5.112.73:2375</dockerHost>

                    &lt;!&ndash; 这里是复制 jar 包到 docker 容器指定目录配置 &ndash;&gt;
                    <resources>
                        <resource>
                            <targetPath>/</targetPath>
                            &lt;!&ndash;jar 包所在的路径  此处配置的 即对应 target 目录&ndash;&gt;
                            <directory>${project.build.directory}</directory>
                            &lt;!&ndash;用于指定需要复制的文件 需要包含的 jar包 ，这里对应的是 Dockerfile中添加的文件名　&ndash;&gt;
                            <include>${project.build.finalName}.jar</include>
                        </resource>
                    </resources>

                </configuration>
            </plugin>-->
        </plugins>
    </build>

</project>
